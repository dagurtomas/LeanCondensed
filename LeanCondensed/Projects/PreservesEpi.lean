import Mathlib

import LeanCondensed.Mathlib.CategoryTheory.Functor.EpiMono
import LeanCondensed.Projects.LightProfiniteInjective


universe u v

open CategoryTheory Category Preadditive LightProfinite OnePoint Limits LightCondensed

variable {C : Type*} [Category C] [MonoidalCategory C] [MonoidalClosed C]

class InternallyProjective (P : C) : Prop where
  preserves_epi : (ihom P).PreservesEpimorphisms

namespace InternallyProjective

theorem ofRetract {X Y : C} (r : Retract Y X) (proj : InternallyProjective X)
    : InternallyProjective Y :=
  haveI : Retract (ihom Y) (ihom X) := {
    i := MonoidalClosed.pre r.r
    r := MonoidalClosed.pre r.i
    retract := by
      rw [‚ÜêMonoidalClosed.pre_map, r.retract, MonoidalClosed.pre_id]
  }
  InternallyProjective.mk <| preservesEpi_ofRetract this proj.preserves_epi

end InternallyProjective

open LightCondensed

variable (R : Type _) [CommRing R]

instance : TotallyDisconnectedSpace PUnit := by
  have := TotallySeparatedSpace.of_discrete
  apply TotallySeparatedSpace.totallyDisconnectedSpace

def pt := LightProfinite.of PUnit.{1}

def Œπ : pt ‚ü∂ ‚Ñï‚à™{‚àû} := (TopCat.ofHom ‚ü®fun _ ‚Ü¶ ‚àû, continuous_const‚ü©)

instance : Mono Œπ := (CompHausLike.mono_iff_injective Œπ).mpr fun _ _ ‚Ü¶ congrFun rfl

instance : Nonempty pt := by
  unfold pt
  infer_instance

noncomputable def Œπ_SplitMono : SplitMono Œπ where
  retraction := ((injective_of_light (LightProfinite.of PUnit.{1})).factors (ùüô pt) Œπ).choose
  id := ((injective_of_light pt).factors _ _).choose_spec

noncomputable def P_map :
    (free R).obj (LightProfinite.of PUnit.{1}).toCondensed ‚ü∂ (free R).obj (‚Ñï‚à™{‚àû}).toCondensed :=
  (lightProfiniteToLightCondSet ‚ãô free R).map (TopCat.ofHom ‚ü®fun _ ‚Ü¶ ‚àû, continuous_const‚ü©)

noncomputable def ŒπSplit : SplitMono (P_map R) := SplitMono.map Œπ_SplitMono (lightProfiniteToLightCondSet ‚ãô (free R))

noncomputable def P : LightCondMod R := cokernel (P_map R)

noncomputable def P_proj : (free R).obj (‚Ñï‚à™{‚àû}).toCondensed ‚ü∂ P R := cokernel.œÄ _

noncomputable def P_homMk (A : LightCondMod R) (f : (free R).obj (‚Ñï‚à™{‚àû}).toCondensed ‚ü∂ A)
    (hf : P_map R ‚â´ f = 0) : P R ‚ü∂ A := cokernel.desc _ f hf

noncomputable def xyz := (Preadditive.homGroup _ _).sub (ùüô (free R).obj (‚Ñï‚à™{‚àû}).toCondensed)  ((ŒπSplit R).retraction ‚â´ ((lightProfiniteToLightCondSet ‚ãô free R).map Œπ))

lemma comp_zero : P_map R ‚â´ xyz R = 0 := by
    erw [
        Preadditive.comp_sub,
        comp_id,
        Functor.comp_map,
        SplitMono.id_assoc,
        sub_eq_zero
    ]
    rfl

instance P_proj_Epi : Epi (P_proj R) := by
  unfold P_proj
  rw [‚Üêcoequalizer_as_cokernel]
  exact coequalizer.œÄ_epi

noncomputable def œÄSplit : SplitEpi (P_proj R) where
  section_ := P_homMk R ((free R).obj (‚Ñï‚à™{‚àû}).toCondensed) (xyz R) (comp_zero _)
  id := by
    apply (P_proj_Epi R).left_cancellation
    erw [
      cokernel.œÄ_desc_assoc,
      sub_comp,
      id_comp,
      assoc,
      cokernel.condition,
      HasZeroMorphisms.comp_zero,
      sub_zero
    ]

noncomputable def r : Retract (P R) ((free R).obj ‚Ñï‚à™{‚àû}.toCondensed) where
  i := (œÄSplit R).section_
  r := P_proj R
  retract := (œÄSplit R).id

instance : MonoidalCategory (LightCondMod.{u} R) := sorry

instance : MonoidalClosed (LightCondMod.{u} R) := sorry

instance qwerty : InternallyProjective ((free R).obj (‚Ñï‚à™{‚àû}).toCondensed) := sorry

theorem qwerty' : InternallyProjective (P R) := (qwerty _).ofRetract (r _)
