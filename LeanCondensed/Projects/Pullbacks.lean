import Mathlib
import LeanCondensed.Projects.Epi

open CategoryTheory Functor Opposite LightProfinite OnePoint Limits LightCondensed
  MonoidalCategory MonoidalClosed WalkingParallelPair WalkingParallelPairHom Topology

universe u

variable {X Y : LightProfinite} (y : Y) (f : X ‚ü∂ Y)

section

instance (x : X) : IsClosed {x} := isClosed_singleton

instance (S : Set Y) [IsClosed S] : IsClosed (f ‚Åª¬π' S) := by
  exact IsClosed.preimage f.1.continuous inferInstance

instance : IsClosed (f ‚Åª¬π' {y}) :=
  inferInstance

instance (S : Set X) [IsClosed S] : CompactSpace S := by
  exact isCompact_iff_compactSpace.mp (IsClosed.isCompact inferInstance)

instance : CompactSpace (f ‚Åª¬π' {y}) := inferInstance

end

instance : TotallyDisconnectedSpace PUnit := by
  have := TotallySeparatedSpace.of_discrete
  apply TotallySeparatedSpace.totallyDisconnectedSpace

def fibre : LightProfinite :=
  ‚ü®
    TopCat.of (f ‚Åª¬π' {y}),
    Subtype.totallyDisconnectedSpace,
    TopologicalSpace.Subtype.secondCountableTopology (f ‚Åª¬π' {y})
  ‚ü©

def fibre_incl : fibre y f ‚ü∂ X :=
  CompHausLike.ofHom _ ‚ü®Subtype.val, continuous_subtype_val‚ü©

@[simp]
def fibre_condition
  : fibre_incl y f ‚â´ f = (CompHausLike.ofHom _  <| ContinuousMap.const (fibre y f) y)
    := by ext x; exact x.2

lemma fibre_incl_mono : Mono (fibre_incl y f) := by
  rw [CompHausLike.mono_iff_injective]
  exact Subtype.val_injective

lemma fibre_incl_embedding : IsEmbedding (fibre_incl y f) := IsEmbedding.subtypeVal

lemma fibre_nonempty [hepi : Epi f] : Nonempty (fibre y f) := by
  rw [epi_iff_surjective f] at hepi
  obtain ‚ü®x, hx‚ü© := hepi y
  exact ‚ü®x, hx‚ü©

def point : LightProfinite := LightProfinite.of PUnit

def fibreCone : PullbackCone (CompHausLike.ofHom _ <| ContinuousMap.const point y) f
    :=
  let space := f ‚Åª¬π' {y}
  have : IsClosed space :=  IsClosed.preimage f.1.continuous isClosed_singleton
  have : IsCompact space := this.isCompact
  have : CompactSpace space := by
    exact isCompact_iff_compactSpace.mp this
  PullbackCone.mk (CompHausLike.ofHom _ <| ContinuousMap.const (fibre y f) PUnit.unit) (fibre_incl y f)
    (by ext x; simp only [fibre_incl, ConcreteCategory.comp_apply, CompHausLike.hom_ofHom,
      ContinuousMap.const_apply, ContinuousMap.coe_mk]; rw [x.2])

def fibreConeIsLimit : IsLimit (fibreCone y f) := by
  refine PullbackCone.IsLimit.mk (fibreCone _ _).condition ?_ ?_ ?_ ?_
  ¬∑ intro cone
    have : ‚àÄ z : cone.pt, f (cone.snd z) = y := by
      intro z
      rw [
        ‚ÜêConcreteCategory.comp_apply,
        ‚Üêcone.condition,
        ConcreteCategory.comp_apply
      ]
      rfl
    refine CompHausLike.ofHom _ <| ‚ü®fun z ‚Ü¶ ‚ü®cone.snd z, this z‚ü©, ?_‚ü©
    rw [IsInducing.continuous_iff (fibre_incl_embedding y f).1]
    exact cone.snd.1.continuous
  repeat {exact fun cone ‚Ü¶ rfl}
  ¬∑ intro cone m hm hm'
    have := fibre_incl_mono y f
    erw [‚Üêcancel_mono (fibre_incl y f), hm']
    rfl

def fibreLift {Z : LightProfinite} (g : Z ‚ü∂ X) (hg : ‚àÄ z, f (g z) = y) : Z ‚ü∂ fibre y f :=
  let space := f ‚Åª¬π' {y}
  have : IsClosed space :=  IsClosed.preimage f.1.continuous isClosed_singleton
  have : IsCompact space := this.isCompact
  have : CompactSpace space := by
    exact isCompact_iff_compactSpace.mp this
  CompHausLike.ofHom _ <| ‚ü®fun z ‚Ü¶ ‚ü®g z, hg z‚ü©, by rw [IsInducing.continuous_iff (fibre_incl_embedding y f).1]; exact g.1.continuous‚ü©

@[simp]
lemma fibreLift_comp {Z : LightProfinite} (g : Z ‚ü∂ X) (hg : ‚àÄ z, f (g z) = y)
  : fibreLift y f g hg ‚â´ fibre_incl y f = g := rfl

section

variable {X Y Z : LightProfinite} (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z)

instance : IsClosed {‚ü®x,y‚ü© : X √ó Y | f x = g y} := by
  apply IsClosed.mk
  rw [isOpen_prod_iff]
  intro a b hab
  obtain ‚ü®u, v, hu, hv, ha, hb, huv‚ü© := t2_separation hab
  refine ‚ü®
      f‚Åª¬π'u, g‚Åª¬π'v,
      f.1.continuous.isOpen_preimage _ hu,
      g.1.continuous.isOpen_preimage _ hv,
      ha, hb, ?_
  ‚ü©
  intro ‚ü®x, y‚ü© ‚ü®hx, hy‚ü© hxy
  simp only [Set.mem_preimage] at hx hy
  rw [hxy] at hx
  exact (Set.disjoint_iff (s := u) (t := v)).mp huv ‚ü®hx, hy‚ü©

instance : IsCompact {‚ü®x,y‚ü© : X √ó Y | f x = g y} := by
  apply IsClosed.isCompact
  infer_instance

instance : CompactSpace {‚ü®x,y‚ü© : X √ó Y | f x = g y} := by
  rw [‚ÜêisCompact_iff_compactSpace]
  exact
    instIsCompactProdCarrierToTopAndTotallyDisconnectedSpaceSecondCountableTopologySetOfMatch_1PropEqCoeContinuousMapHomLightProfinite
      f g

end

def explicitPullback {X Y Z : LightProfinite} (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z) : LightProfinite
    :=
  ‚ü®TopCat.of {‚ü®x,y‚ü© : X √ó Y | f x = g y}, inferInstance, inferInstance‚ü©

namespace explicitPullback

variable {X Y Z : LightProfinite} {f : X ‚ü∂ Z} {g : Y ‚ü∂ Z}

def fst (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z) : explicitPullback f g ‚ü∂ X :=
  TopCat.ofHom
    ‚ü®
      (Prod.fst : X √ó Y ‚Üí X) ‚àò (Subtype.val : _ ‚Üí X √ó Y),
      Continuous.comp continuous_fst continuous_subtype_val
    ‚ü©

def snd (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z) : explicitPullback f g ‚ü∂ Y :=
  TopCat.ofHom
    ‚ü®
      (Prod.snd : X √ó Y ‚Üí Y) ‚àò (Subtype.val : _ ‚Üí X √ó Y),
      Continuous.comp continuous_snd continuous_subtype_val
    ‚ü©

instance epi_pullback [hepi : Epi f] : Epi (snd (f := f) (g := g)) := by
  rw [LightProfinite.epi_iff_surjective] at hepi ‚ä¢
  intro y
  obtain ‚ü®x, hx‚ü© := hepi (g y)
  exact ‚ü®‚ü®‚ü®x, y‚ü©, hx‚ü©, rfl‚ü©


lemma condition : fst (f := f) (g := g) ‚â´ f = snd (f := f) (g := g) ‚â´ g := by
  ext ‚ü®_,hxy‚ü©
  exact hxy

def Cone (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z) : PullbackCone f g :=
  PullbackCone.mk (fst _ _) (snd _ _) condition

lemma Cone.fst_eq : (Cone f g).fst = fst _ _ := rfl
lemma Cone.snd_eq : (Cone f g).snd = snd _ _ := rfl

def IsLimit : IsLimit (Cone f g) := by
  let space := {‚ü®x,y‚ü© : X √ó Y | f x = g y}
  have : IsClosed space := by
    apply IsClosed.mk
    rw [isOpen_prod_iff]
    intro a b hab
    obtain ‚ü®u, v, hu, hv, ha, hb, huv‚ü© := t2_separation hab
    refine ‚ü®
      f‚Åª¬π'u, g‚Åª¬π'v,
      f.1.continuous.isOpen_preimage _ hu,
      g.1.continuous.isOpen_preimage _ hv,
      ha, hb, ?_
    ‚ü©
    intro ‚ü®x, y‚ü© ‚ü®hx, hy‚ü©
    simp only [Set.mem_preimage] at hx hy
    intro hxy
    rw [hxy] at hx
    exact (Set.disjoint_iff (s := u) (t := v)).mp huv ‚ü®hx, hy‚ü©
  have : IsCompact space := this.isCompact
  have : CompactSpace space := by
    exact isCompact_iff_compactSpace.mp this

  refine PullbackCone.IsLimit.mk ?_ ?_ ?_ ?_ ?_
  ¬∑ intro cone
    have : ‚àÄ z, ‚ü®cone.fst z, cone.snd z‚ü© ‚àà space := by
      intro z
      simp only [Set.mem_setOf_eq, space]
      rw [‚ÜêConcreteCategory.comp_apply, cone.condition]
      rfl
    refine TopCat.ofHom ‚ü®fun z ‚Ü¶ ‚ü®‚ü®cone.fst z, cone.snd z‚ü©, this z‚ü©, ?_‚ü©
    rw [(IsInducing.continuous_iff IsEmbedding.subtypeVal.1)]
    exact Continuous.prodMk cone.fst.1.continuous cone.snd.1.continuous
  repeat {intro cone; ext z; rfl}
  ¬∑ intro cone m hm hm'
    ext z
    apply Subtype.ext
    apply Prod.ext
    change fst _ _ (‚Üë((ConcreteCategory.hom m) z)) = _
    rw [‚ÜêConcreteCategory.comp_apply, hm]
    rfl
    change snd _ _ (‚Üë((ConcreteCategory.hom m) z)) = _
    rw [‚ÜêConcreteCategory.comp_apply, hm']
    rfl

def diagonal (f : X ‚ü∂ Y) : X ‚ü∂ explicitPullback f f
  := PullbackCone.IsLimit.lift IsLimit (ùüô _) (ùüô _) rfl

def map {X' Y' Z' : LightProfinite} (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z) (f' : X' ‚ü∂ Z')
  (g' : Y' ‚ü∂ Z') (i‚ÇÅ : X ‚ü∂ X') (i‚ÇÇ : Y ‚ü∂ Y') (i‚ÇÉ : Z ‚ü∂ Z')
  (eq‚ÇÅ : f ‚â´ i‚ÇÉ = i‚ÇÅ ‚â´ f') (eq‚ÇÇ : g ‚â´ i‚ÇÉ = i‚ÇÇ ‚â´ g')
  : explicitPullback f g ‚ü∂ explicitPullback f' g' :=
    PullbackCone.IsLimit.lift IsLimit (fst _ _ ‚â´ i‚ÇÅ) (snd _ _ ‚â´ i‚ÇÇ)
      (by rw [Category.assoc, Category.assoc, ‚Üêeq‚ÇÅ, ‚Üêeq‚ÇÇ, ‚ÜêCone.fst_eq,
              PullbackCone.condition_assoc, Cone.snd_eq])

lemma map_fst {X' Y' Z' : LightProfinite} (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z) (f' : X' ‚ü∂ Z')
  (g' : Y' ‚ü∂ Z') (i‚ÇÅ : X ‚ü∂ X') (i‚ÇÇ : Y ‚ü∂ Y') (i‚ÇÉ : Z ‚ü∂ Z')
  (eq‚ÇÅ : f ‚â´ i‚ÇÉ = i‚ÇÅ ‚â´ f') (eq‚ÇÇ : g ‚â´ i‚ÇÉ = i‚ÇÇ ‚â´ g') : map f g f' g' i‚ÇÅ i‚ÇÇ i‚ÇÉ eq‚ÇÅ eq‚ÇÇ ‚â´ fst f' g' = fst f g ‚â´ i‚ÇÅ := rfl

lemma map_snd {X' Y' Z' : LightProfinite} (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z) (f' : X' ‚ü∂ Z')
  (g' : Y' ‚ü∂ Z') (i‚ÇÅ : X ‚ü∂ X') (i‚ÇÇ : Y ‚ü∂ Y') (i‚ÇÉ : Z ‚ü∂ Z')
  (eq‚ÇÅ : f ‚â´ i‚ÇÉ = i‚ÇÅ ‚â´ f') (eq‚ÇÇ : g ‚â´ i‚ÇÉ = i‚ÇÇ ‚â´ g') : map f g f' g' i‚ÇÅ i‚ÇÇ i‚ÇÉ eq‚ÇÅ eq‚ÇÇ ‚â´ snd f' g' = snd f g ‚â´ i‚ÇÇ := rfl

def explicitPair  {X Y : LightProfinite} (œÄ : X ‚ü∂ Y) : WalkingParallelPair ‚•§ LightCondSet
  := parallelPair
    (lightProfiniteToLightCondSet.map (fst œÄ œÄ)) (lightProfiniteToLightCondSet.map (snd œÄ œÄ))

noncomputable def explicitPullbackIsoPullback {X Y : LightProfinite} (œÄ : X ‚ü∂ Y) : explicitPullback œÄ œÄ ‚âÖ pullback œÄ œÄ :=
  Limits.IsLimit.conePointUniqueUpToIso (IsLimit (f := œÄ) (g := œÄ)) (pullback.isLimit œÄ œÄ)

noncomputable def explicitPairIsoPair {X Y : LightProfinite} (œÄ : X ‚ü∂ Y) : explicitPair œÄ ‚âÖ œÄpair œÄ :=
  parallelPair.ext
    (lightProfiniteToLightCondSet.mapIso (explicitPullbackIsoPullback œÄ) : (explicitPair œÄ).obj zero ‚âÖ (œÄpair œÄ).obj zero)
    (Iso.refl _)
    (
        by simp [‚ÜêFunctor.map_comp, explicitPair, œÄpair, explicitPullbackIsoPullback]; rfl
    )
    (
        by simp [‚ÜêFunctor.map_comp, explicitPair, œÄpair, explicitPullbackIsoPullback]; rfl
    )

def explicitRegular {X Y : LightProfinite} (œÄ : X ‚ü∂ Y)
    : Cofork (lightProfiniteToLightCondSet.map <| fst œÄ œÄ)
      (lightProfiniteToLightCondSet.map <| snd œÄ œÄ) :=
  Cofork.ofœÄ (lightProfiniteToLightCondSet.map œÄ)
    (by simp only [‚ÜêFunctor.map_comp, condition])

noncomputable def explicitRegularIsColimit {X Y : LightProfinite} (œÄ : X ‚ü∂ Y) [hepi : Epi œÄ]
    : IsColimit (explicitRegular œÄ) := by
  rw [LightProfinite.epi_iff_surjective, ‚ÜêLightProfinite.effectiveEpi_iff_surjective] at hepi
  exact (
    IsColimit.equivOfNatIsoOfIso
      (explicitPairIsoPair _)
      _
      (regular _)
      (Cofork.ext (Iso.refl _) rfl)
  ).symm (regular_IsColimit _)
